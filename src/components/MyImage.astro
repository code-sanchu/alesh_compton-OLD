---
import { Image } from "@astrojs/image/components";

const { src } = Astro.props;
---

<Image id="image" src={src} alt="" format="avif" />
<div id="background" class="background"></div>

<style>
  img {
    z-index: 2;
    width: auto;
    max-height: 100%;
    cursor: pointer;
    transition: transform ease-in-out 0.5s;
    transform-origin: right;
  }
  .expand {
    /* z-index: 2; */
    /* position: fixed; */
    /* left: 0; */
    /* top: 0; */
    /* width: 90%; */
    /* height: 90%; */
    /* object-fit: contain; */
  }
  .background {
    z-index: -1;
    /* background-color: rgba(244, 245, 246, 0.3); */
    position: fixed;
    inset: 0;
    background-color: #ffffff;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' viewBox='0 0 4 4'%3E%3Cpath fill='%23000000' fill-opacity='1' d='M1 3h1v1H1V3zm2-2h1v1H3V1z'%3E%3C/path%3E%3C/svg%3E");
    transition: opacity ease-in-out 0.5s;
    opacity: 0;
  }
</style>

<script>
  const image = document.getElementById("image");
  const background = document.getElementById("background");

  // could add listener for each image by getting a list of images
  // if an image is open, isn't possible to click on another.
  if (image && background) {
    image.addEventListener("click", () => {
      const pageWidth = document.body.scrollWidth;
      const pageHeight = document.body.scrollHeight; // 1660

      const imageWidth = image.getBoundingClientRect().width;
      const imageHeight = image.getBoundingClientRect().height; // 1084

      const imageOrientation =
        imageWidth > imageHeight ? "landscape" : ("portrait" as const);

      let scale: number = 1;

      let translateY: number;
      let translateX: number;

      // if image orientation is landscape then max expansion will be limited by width?
      // transform position works by calculating scale expansion and adding any transform
      if (imageOrientation === "landscape") {
        const maxWidth = pageWidth * 0.9;
        scale = maxWidth / imageWidth;

        translateX = -100;
        translateY = -100;

        const xDestination = pageWidth - maxWidth;
        const yDestination = (pageHeight - imageHeight * scale) / 2;
      } else {
        const maxHeight = pageHeight * 0.9; // 1494
        scale = maxHeight / imageHeight; // 1.38

        const newWidth = imageWidth * scale;
        const newHeight = imageHeight * scale;

        const initialYTop = image.getBoundingClientRect().top;
        const scaledYTopChange = (newHeight - imageHeight) / 2;
        const scaledYPos = initialYTop - scaledYTopChange;
        const yDestination = (pageHeight - newHeight) / 2;
        translateY = yDestination - scaledYPos;

        // transform origin is "right". Scales y top and bottom evenly. Left side of image expands; right doesn't move.
        const initialLeft = image.getBoundingClientRect().left;
        const scaledLeftChange = newWidth - imageWidth;
        const scaledLeft = initialLeft - scaledLeftChange;
        const xDestination = (pageWidth - newWidth) / 2;
        translateX = xDestination - scaledLeft;
      }

      const classList = image.classList;
      const expandClass = "expand";
      const isExpanded = classList.contains(expandClass);
      if (isExpanded) {
        image.classList.remove(expandClass);

        image.style.transform = "translate(0px) scale(1)";

        setTimeout(() => {
          if (image.parentElement) {
            image.parentElement.style.overflowX = "auto";
          }
          image.style.display = "inline";
        }, 550);

        background.style.opacity = "0";
        setTimeout(() => {
          background.style.zIndex = "-1";
        }, 550);
      } else {
        image.classList.add(expandClass);

        if (image.parentElement) {
          image.parentElement.style.overflowX = "visible";
        }

        // const translateY = -(yPos - yDestination);
        // console.log("translateX:", translateX);
        // console.log("translateY:", translateY);

        image.style.display = "absolute";
        // image.style.transform = `translate(-200px, 0) scale(${1.1})`;
        image.style.transform = `translate(${translateX}px, ${translateY}px) scale(${scale})`;
        // image.style.transform = `translate(0, 83px) scale(${1.38})`;
        // image.style.transform = `translate(-${100}px, -${100}px scale(${scale})`;
        /*         image.style.transform = `translate(-${xPos - xDestination}px, -${
          yPos - yDestination
        }px scale(${scale})`; */

        background.style.opacity = "1";
        background.style.zIndex = "1";
      }
    });
  }
</script>

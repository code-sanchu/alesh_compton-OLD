---
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import Media from "../components/Media.astro";

import image1 from "../images/butterfly/1.jpg";
import image2 from "../images/butterfly/2.jpg";
import image3 from "../images/butterfly/3.jpg";

import "../styles/global.css";
import type { LocalImage, YoutubeVideo } from "../types";

type Props = {
  title: string;
  description?: string[];
  media: (LocalImage | YoutubeVideo)[];
};

const page = {
  title: "Transformation",
  description: [
    "The project culminated in an exhibition of the paintings in London, a weeklong public screening of the film in Tokyo and a hardback book, which is available for purchase here â€“ https://www.transformation-zine.com/",
  ],
  media: [
    {
      type: "youtube-video",
      youtubeUrl: "https://www.youtube.com/watch?v=t6Lj6hzrmtE&t=1s",
    },
    { type: "image", url: image1 },
  ] as Props["media"],
};
---

<div class="page-container">
  <Header />
  <div class="body-container">
    <div class="body-container2">
      <div class="text-container">
        <p class="text">
          {page.title}
        </p>
        {
          page.description && (
            <p class="text description">
              {typeof page.description === "string"
                ? page.description
                : page.description.map((sentence) => <span>{sentence}</span>)}
            </p>
          )
        }
      </div>
      <Media media={page.media} />
    </div>
  </div>
  <Footer />
</div>

<style>
  .page-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
    padding-left: 2.5vw;
    /* border: 1px red solid; */
  }
  .body-container {
    /* border: 1px solid; */
    flex-grow: 1;
    height: 100%;
    position: relative;
  }
  .body-container2 {
    position: absolute;
    inset: 0;
    display: flex;
  }
  .text-container {
    margin-right: 58px;
  }
  .text {
    width: 405px;
  }
  .description {
    display: flex;
    flex-direction: column;
    margin-top: 1em;
  }
</style>

<script>
  function SmoothScroll(target: HTMLElement, speed: number, smooth: number) {
    let moving = false;
    let pos = target.scrollLeft;
    let frame = target;

    target.addEventListener("mousewheel", scrolled, { passive: false });
    target.addEventListener("DOMMouseScroll", scrolled, { passive: false });

    function scrolled(e: { preventDefault: () => void }) {
      // console.log("SCROLLED");
      e.preventDefault(); // disable default scrolling

      var delta = normalizeWheelDelta(e);

      pos += -delta * speed;
      pos = Math.max(0, Math.min(pos, target.scrollWidth - frame.clientWidth)); // limit scrolling

      if (!moving) update();
    }

    function normalizeWheelDelta(e: {
      preventDefault?: () => void;
      detail?: any;
      wheelDelta?: any;
    }) {
      if (e.detail) {
        if (e.wheelDelta)
          return (e.wheelDelta / e.detail / 40) * (e.detail > 0 ? 1 : -1);
        // Opera
        else return -e.detail / 3; // Firefox
      } else return e.wheelDelta / 120; // IE,Safari,Chrome
    }

    function update() {
      moving = true;

      var delta = (pos - target.scrollLeft) / smooth;

      target.scrollLeft += delta;

      if (Math.abs(delta) > 0.5) requestFrame(update);
      else moving = false;
    }

    var requestFrame = (function () {
      // requestAnimationFrame cross browser
      return (
        window.requestAnimationFrame ||
        // window.webkitRequestAnimationFrame ||
        // window.mozRequestAnimationFrame ||
        // window.oRequestAnimationFrame ||
        // window.msRequestAnimationFrame ||
        function (func) {
          window.setTimeout(func, 1000 / 50);
        }
      );
    })();
  }

  const imagesContainer = document.getElementById("images-container");
  if (imagesContainer) {
    /*     imagesContainer.addEventListener("wheel", (e) => {
      if (e.deltaY > 0) imagesContainer.scrollLeft += 100;
      else imagesContainer.scrollLeft -= 100;
    }, {});  */
    SmoothScroll(imagesContainer, 120, 12);
  }
</script>
